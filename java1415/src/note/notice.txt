


UI      --create,update,delete-->      DAO  -->     mySQL
        <-- read --
=> 전달할 데이터가 많은 경우, 가방역할을 해줄 클래스 필요
=> 왜 가방역할의 클래스가 왜 필요한가요?
전달할 때, 타입이 다르고 개수도 많다면, 이것을 
일일이 처리하기 힘들다.
=> Data Transfer Object(DTO), Value Object(VO)
=> 자바프로그램에서는 반드시 db테이블 하나당 DAO, DTO(VO)
를 만들어주어야 함.


=======================================================


java db connectivity(JDBC)
자바(Swing)----      connector/driver         ----mySQL
- UI
- DB처리 전담(Create, Read, Update, Delete: CRUD)
- 데이터전송용 


라이브러리: 특정한 기능을 수행하는 클래스들의 모음



=======================================================




예외처리: 오류가 나면 프로그램이 멈추어버림.
    프로그램 코딩시 오류가 나서 프로그램이 
   멈출 것 상황에서 오류가 나더라도 특별히 문제가 없는한
   프로그램이 멈추지 않고 실행되도록 하는 처리
   a----> b-----> c
   a에서 오류가 난 경우 예외처리해놓으면
   a만 실행이 안되고, b,c는 실행이 됨.
  자바에서는 반드시 예외처리해야하는 상황이 있음.
     1) 네트워크 연결
     2) DB연결
     3) 파일 연결


=======================================================



삭제UI.java
DB연결전담클래스.java에 delete메서드 완성해서
delete from member where id = ?
=> 완성해서 cafe에 답글로 올려주세요.!!
(화면 + 코드)
=> 답글 윗 쪽에 질문 1개 이상씩 올려주세요.!!



=======================================================

=> 본인의 답글로 올려주세요.! 
1) jdbc란?
2) db프로그램 절차 4가지
3) jdbc에서 connector의 역할
4) 자바로 만든 UI에서 입력한 값들을 DB에 넣으려고 한다.
당신이라면 어떻게 하겠는가?
5) db연결시 필요한 정보 4가지
6) 자바에서 부품을 만들때 특정한 기능을 가진 부품으로 만들려고 한다.
어떻게 기능을 정의할 것인가?
7) 특정 기능을 처리하는 메소드에서 입력값과 반환값의 의미는?
8) DAO는 무엇의 약자?
9) DTO는 무엇의 약자? VO는 무엇의 약자?
10) DAO의 역할? VO의 역할?
11) DB의 테이블당 반드시 필요한 자바의 클래스 2개
12) 프로젝트에서 사용할 테이블이 5개입니다. 필요한 DAO, DTO의 개수는?
13) UI-----DAO----mySQL를 설계하였음. 회원과 관련된 crud를 구현시
어떤 방식으로 동작하는지 그림을 그려 간단히 설명하시오.


=======================================================



ID     ____________(t1)
PW     ____________(t2)
NAME   ____________(t3)
TEL    ____________(t4)

==============
Create / Read / Update / Delete
(create) (read)   (update)  (delete)


=======================================================

CRUD: DBMS에 넣은 데이터조작 4가지
SQL문 종류 3가지
---------------------
- DDL
- DML
- DCL


=======================================================


로그인 버튼을 추가
id, pw를 입력해서
DAO에 만들어놓은 read()
메서드를 이용하여 로그인처리
해주세요.로그인ok, 로그인not.


=======================================================


계산기
프로그램하려고 하는 대상은
2가지 특징을 가지고 있음.
1)눈에 보이는 속성: 색, 가격, 크기
2)동작: 더하다, 빼다, 곱하다, 나누다


=======================================================





product 테이블 완성
id, title, price(int) company, tel
=> bbs용, product용 dto 2개 완성!


=======================================================


1.타입이 같은 값들 100개 + 고정된 길이=>배열
2.타입이 다른 값들 100개=>클래스(bag)
3.타입이 다른 값들 100개의 묶음 50개=>bag을 넣을 수 있는
	                                   더 큰 클래스!


=======================================================

RDB(<-> noSQL: 항목을 정하지 않고 저장, 몽고DB, Redis)
----
우리가 사용하고 있는 DBMS는 저장하려고 하는 대상들간의
"관계성"을 따져서 저장하는 방식을 가짐.
=> 관계형 DBMS(Relational DBMS, RDBMS, RDB)
쇼핑몰의 예를 들면, 회원이 물건을 주문한다라고 했을 때
				=>회원테이블, 물건테이블, 주문테이블을 생성하여 저장함.
			      회원이 게시판에 글을 작성한다라고 했을 때
			    =>회원테이블, 게시판테이블을 만들고,
			      게시판에 글을 쓸 때 회원인지를 자동체크하게됨.
=> RDB에서는 테이블과 컬럼(항목)이 핵심
=> RDB에서는 어떤 것들을 저장할 지 미리 결정을 먼저 함.
  (저장할 항목이 정해져 있는 경우 보통 사용!, SQL문 사용)


=======================================================

클래스와 클래스의 연결(부품과 부품의 연결)
-----------------------------------
=> 메서드 호출로 연결!
   (기능을 처리하는 동적인 단위)
=> 메서드 호출할 때 입력값으로 데이터 전달
     전달하는 데이터의 종류
   1) BbsVo bag인 경우, 참조형 변수의 "주소"가 전달
      => call by reference
         (참조에 의한 호출, 주소에 의한 호출)
   2) int no인 경우, 기본형 변수의 "값"이 전달
      => call by value
         (값에 의한 호출)
         

=======================================================
JDBC프로그래밍에서는  "ORM(Object Rdb Mapping)"이 중요!
자바 객체와 RDB의 맵핑이 중요!
-------------------------------------------------------
Object ------------- RDB table -------Mapping
class(DAO)	       table
class(VO,DTO)	      항목들
변수				      각 항목


=======================================================
많은 양의 데이터들을 묶을 때 사용하는 클래스의 종류: Collection(모음)
=>배열(array)과 콜렉션(collection)
   1)공통점
     - 많은 양의 데이터를 다룰 수 있음.
   2)차이점
     - 타입 동일 여부
             배열: 값을 타입들만 묶을 수 있다.
             컬렉션: 다양한 타입들 묶을 수 있다.
     - 개수
             배열: 고정된 길이를 가진다.
             컬렉션: 가변적 길이를 가진다.   
             
             
           
=======================================================

컬렉션(Collection):데이터들을 모아서 처리할 수 있는 클래스
                 크기조정 가능, 다양한 데이터의 형태들을 묶을 수 있다.
------------------------------------------------
1) 순서(list형태) => ArrayList
2) 먼저 들어온 것이 먼저 나가는 형태(Queue형태, 큐, 대기줄)
   (First Input First Output, FIFO) => LinkedList   
3) 중복X(Set형태, 집합) => HashSet
4) 키와 값의 쌍으로 저장되는 형태(Map형태, 매핑, 사전형태)
     사과<->apple  => HashMap       
             
             
=======================================================
static(정적) <----> dynamic(동적): instance변수
=> 메모리 할당을 동적/정적으로 하느냐에 따라 구분
Tv tv1 = new Tv(); //color, price
Tv tv2 = new Tv(); //color, price
=> 기존에 사용했던 new를 이용한 객체 생성시 메모리 할당(동적 메모리 할당)           
             
             
             
=======================================================
답글로 올려주세요.!
=>그림 그린 것
=>조별 파일저장 담당 결정
=>아래 계좌 문제의 답안과 생성된 파일목록 사진, 소스
------------------------------------------------------
계좌를 5개 만들어서
파일에 저장해보세요.
파일이름은 사람이름으로!
예) 홍길동.txt
     김길동.txt             
             
 
======================================================= 

-변수의 종류
1)저장되는 것
  기본형(값), 참조형(주소)
2)사용할 수 있는 범위
  전역(클래스전체영역), 지역(메서드 영역, 제어문 영역)
  => 변수가 만들어지는 위치!(선언할 때 변수는 만들어진다.)
       변수의 선언위치가 중요!
3)객체생성과 관련된 메모리 할당
  => 인스턴스(객체생성할 때마다 각각 메모리 할당되어 저장), 
       정적(객체생성과 무관하게 클래스당 하나만 할당하여 저장,
             공유할 목적으로 만들어 사용)

heap 
1. (아무렇게나 쌓아 놓은) 더미, 2. 많음

======================================================= 

개념 중간 정리
--------------
1) 인스턴스 변수와 정적 변수의 차이점
2) 멤버변수 3개인 클래스의 객체가 5개 만들어졌음.
   stack영역에 만들어진 변수의 개수
   heap영역에 만들어진 변수의 개수
3) static 메서드를 만드는 이유
    당신이 알고 있는 static메서드 2개 이상
4) 일반 메서드와 static메서드의 차이점
5) static 메서드를 사용하면 좋은 점
6) static 메서드 정의시, static변수만 사용 가능하고 
     인스턴스 변수는 사용불가능하다. 이유는?
7) 당신이 아는 변수의 종류
8) 전역변수와 지역변수와의 차이점
9) 참조형 변수는 어느 메모리의 어느 영역을 참조한다는 것인가?(어느 영역의 주소인가?)
10) 전역/지역을 나누는 기준은 무엇인가?
11) 다음과 같은 코드시 메모리에 무슨 일이 발생하는가? int[] num = new int[10];
12) 다음과 같은 코드시 메모리에 무슨 일이 발생하는가?  
    final int money = 10000;
13) 다음과 같은 코드시 메모리에 무슨 일이 발생하는가?
	public static void main(String[] s){
    	Student s1 = new Student("홍길동", "mega", "011");
		Student s2 = new Student("김길동", "the", "012");
		system.out.println(s1);
	}
             
             
             
  
  

























 
